using Content.Shared.Blueprint;
using Content.Shared.Stacks;
using Content.Shared.Tag;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.Graphics;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Client.Utility;
using Robust.Shared.Prototypes;
using Robust.Shared.Utility;

namespace Content.Client.Blueprint.UI;

[GenerateTypedNameReferences]
public sealed partial class BluebenchMenu : DefaultWindow
{
    [Dependency] private readonly IEntityManager _entityManager = default!;
    [Dependency] private readonly ILocalizationManager _loc = default!;
    public Action<String>? OnTechnologyProjectStart;
    private SpriteSystem _spriteSystem;
    public BluebenchResearchPrototype? ActiveResearchProto;
    public Dictionary<ProtoId<StackPrototype>, int> MaterialProgress = new();
    public Dictionary<string, int> ComponentProgress = new();
    public Dictionary<ProtoId<TagPrototype>, int> TagProgress = new();

    public BluebenchMenu()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        _spriteSystem = _entityManager.System<SpriteSystem>();
    }

    public void UpdateResearchEntries(HashSet<BluebenchResearchPrototype> researchEntries)
    {
        ResearchList.RemoveAllChildren();
        foreach (var entry in researchEntries)
        {
            var message = new FormattedMessage();
            message.AddMarkupOrThrow(entry.Description!);
            message.PushNewline();

            foreach (var (key, value) in entry.StackRequirements)
            {
                message.PushNewline();
                message.AddMarkupOrThrow($"{value}x {key.Id}");
            }
            foreach (var (key, value) in entry.TagRequirements)
            {
                message.PushNewline();
                message.AddMarkupOrThrow($"{value.Amount}x {key.Id}");
            }
            foreach (var (key, value) in entry.ComponentRequirements)
            {
                message.PushNewline();
                message.AddMarkupOrThrow($"{value.Amount}x {key}");
            }

            // var enabled = !(ActiveResearchProto != null && ActiveResearchProto.ID == entry.ID);
            var enabled = ActiveResearchProto == null; // bodge, will do for now
            var item = new BluebenchResearchEntry(entry.Name!, message, _spriteSystem.Frame0(entry.Icon!), entry.ID, enabled);
            item.OnTechnologyProjectStart = OnTechnologyProjectStart;

            ResearchList.AddChild(item);
        }
    }

    public void UpdateRequiredComponents()
    {
        ActiveResearch.Text = _loc.GetString("bluebench-active-project") + (ActiveResearchProto == null ? "N/A" : ActiveResearchProto.Name);
        if (ActiveResearchProto is null)
            return;

        var prototypeManager = IoCManager.Resolve<IPrototypeManager>();

        Requirements.RemoveAllChildren();
        foreach (var (key, value) in MaterialProgress)
        {
            if (!prototypeManager.TryIndex(key, out var stackPrototype))
                continue;

            Texture? frame = null;
            if (stackPrototype.Icon is not null)
                _spriteSystem.GetFrame(stackPrototype.Icon, TimeSpan.Zero, false);

            Requirements.AddChild(new BluebenchMaterialRequirement(frame, $"{value}x {stackPrototype.Name}"));
        }

        foreach (var (key, value) in TagProgress)
        {
            if (!prototypeManager.TryIndex(key, out var tagPrototype))
                continue;

            Requirements.AddChild(new BluebenchMaterialRequirement(null, $"{value}x {tagPrototype.ID}"));
        }

        foreach (var (key, value) in ComponentProgress)
        {
            if (!prototypeManager.TryIndex(key, out var componentPrototype))
                continue;

            var frame = _spriteSystem.Frame0(componentPrototype);
            Requirements.AddChild(new BluebenchMaterialRequirement(frame, $"{value}x {componentPrototype.Name}"));
        }
    }
}
